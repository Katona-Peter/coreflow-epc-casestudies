# Django Security Configuration
# ============================

# This file documents the security measures implemented to prevent
# committing Django applications with DEBUG=True enabled.

[security-checks]
debug_protection = enabled
pre_commit_hook = enabled
github_actions = enabled
python_checker = enabled

[debug-settings]
# Current DEBUG setting should always be False for production
current_debug = False
environment_variable = DEBUG
recommended_pattern = "os.environ.get('DEBUG', 'False').lower() == 'true'"

[file-locations]
pre_commit_hook = ".git/hooks/pre-commit"
pre_commit_hook_windows = ".git/hooks/pre-commit.bat"
python_checker = "scripts/check_debug.py"
github_workflow = ".github/workflows/debug-check.yml"
django_settings = "coreflowepc/settings.py"

[usage-instructions]
manual_check = "python scripts/check_debug.py"
strict_check = "python scripts/check_debug.py --strict"
specific_file = "python scripts/check_debug.py --path coreflowepc/settings.py"

[bypass-instructions]
# In case you need to temporarily bypass these checks (NOT RECOMMENDED):
skip_pre_commit = "git commit --no-verify -m 'message'"
# However, GitHub Actions will still block the merge if DEBUG=True

[recommended-development-setup]
# For local development, use one of these approaches:

# Option 1: Environment variable (recommended)
# Set in your local environment: export DEBUG=True
# In settings.py: DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Option 2: Local settings file (alternative)
# Create local_settings.py (add to .gitignore)
# Import in settings.py: from .local_settings import *

# Option 3: Separate settings files
# Create settings/development.py, settings/production.py
# Use: python manage.py runserver --settings=myproject.settings.development
